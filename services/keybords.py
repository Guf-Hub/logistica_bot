#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import logging
from typing import List

from aiogram import Dispatcher
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup, \
    BotCommandScopeChat, BotCommand
from aiogram.utils.exceptions import ChatNotFound

# –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
start_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) \
    .add(KeyboardButton('‚úÖ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'))

staff_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2) \
    .add(KeyboardButton('üè† –ù–∞ –±–∞–∑–µ'),
         KeyboardButton('‚ö° –ü–æ—Å–ª–µ –≠–ö–°/–ú–û–õ'),
         KeyboardButton('‚è≥ –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏'),
         KeyboardButton('üöó –û—Ç—ä–µ—Ö–∞—Ç—å'),
         KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'))

exp_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2) \
    .add(KeyboardButton('‚ö° –ü–æ—Å–ª–µ –≠–ö–°/–ú–û–õ'),
         KeyboardButton('üöó –û—Ç—ä–µ—Ö–∞—Ç—å'),
         KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'))

long_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2) \
    .add(KeyboardButton('üè† –ù–∞ –±–∞–∑–µ'),
         KeyboardButton('üöó –û—Ç—ä–µ—Ö–∞—Ç—å'),
         KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'))

remove = ReplyKeyboardRemove()

boss_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) \
    .row(KeyboardButton('–û—á–µ—Ä–µ–¥—å')) \
    .row(KeyboardButton('–£–¥–∞–ª–∏—Ç—å'), KeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å'))

back_menu = ReplyKeyboardMarkup(resize_keyboard=True) \
    .add(KeyboardButton('üè† –ù–∞ –±–∞–∑–µ'), KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'))

back_menu_inline = InlineKeyboardMarkup(row_width=1) \
    .add(InlineKeyboardButton(text='üè† –ù–∞ –±–∞–∑–µ', callback_data=1),
         InlineKeyboardButton(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É', callback_data=6))

drive_out_menu = InlineKeyboardMarkup(row_width=1) \
    .add(InlineKeyboardButton(text='–ú–æ–π–∫–∞', callback_data='–ú–æ–π–∫–∞'),
         InlineKeyboardButton(text='–®–∏–Ω–∫–∞', callback_data='–®–∏–Ω–∫–∞'),
         InlineKeyboardButton(text='–û–±–µ–¥', callback_data='–û–±–µ–¥'),
         InlineKeyboardButton(text='–ú–∞–≥–∞–∑–∏–Ω', callback_data='–ú–∞–≥–∞–∑–∏–Ω'),
         InlineKeyboardButton(text='–ü—Ä–æ—á–µ–µ', callback_data='–ü—Ä–æ—á–µ–µ'))

queue_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2) \
    .add(KeyboardButton('üöó –û—Ç—ä–µ—Ö–∞—Ç—å'),
         KeyboardButton('‚è≥ –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏'),
         KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'))

logist_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) \
    .add(KeyboardButton('–û—á–µ—Ä–µ–¥—å'))

route_type = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2) \
    .add(KeyboardButton('–≠–ö–°'),
         KeyboardButton('–ú–û–õ'),
         KeyboardButton('–ü–æ–ª–Ω—ã–π'),
         KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))

yes_no = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2) \
    .add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ—Ç'))

bot_commands = [
    BotCommand(command='/start', description='–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–µ—Å–ª–∏ –º–µ–Ω—é –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è)'),
    BotCommand(command='/myid', description='–º–æ–π id'),
    BotCommand(command='/help', description='—Å–ø—Ä–∞–≤–∫–∞')]


async def set_commands(dp: Dispatcher, commands: List[BotCommand], admin_ids: List[int] = None):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞"""
    await dp.bot.set_my_commands(commands=commands)

    if admin_ids:
        commands_for_admin = [
            BotCommand(command='/start', description='–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–µ—Å–ª–∏ –º–µ–Ω—é –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è)'),
            BotCommand(command='/myid', description='–º–æ–π id'),
            BotCommand(command='/help', description='—Å–ø—Ä–∞–≤–∫–∞'),
            BotCommand(command='/log', description='–ª–æ–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã'),
            BotCommand(command='/cancel', description='–æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')]
        for admin_id in admin_ids:
            try:
                await dp.bot.set_my_commands(
                    commands=commands_for_admin,
                    scope=BotCommandScopeChat(admin_id)
                )
            except ChatNotFound as e:
                logging.error(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
