#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os

import pytils
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled
from database.db import db
from services.config import Settings
from services.create_bot import bot, dp
from services.functions import get_current_datetime, write_report_csv
from services.keybords import *
from services.helper import positions, drive_out

tg = Settings().tg


async def cancel(message: types.Message, state=FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    if not message.chat.type == 'private':
        return
    user_id = message.from_user.id
    if user_id in tg.ADMINS or user_id in set(x[0] for x in await db.get_active()):
        current_state = await state.get_state()
        if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∏—Ç—å', '‚ùå –æ—Ç–º–µ–Ω–∞', '/cancel']:
            if current_state is None:
                await message.reply('–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
                if user_id in tg.ADMINS:
                    await message.answer('–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã? üëá', reply_markup=admin_menu)
                elif await db.is_logist(user_id):
                    await message.answer('–ú–µ–Ω—é—à–µ—á–∫–∞ üëá', reply_markup=queue_menu)
                else:
                    await message.answer('–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã? üëá', reply_markup=staff_menu)
            else:
                await state.finish()
                await message.reply('–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
                if user_id in tg.ADMINS:
                    await message.answer('–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã? üëá', reply_markup=admin_menu)
                elif await db.is_logist(user_id):
                    await message.answer('–ú–µ–Ω—é—à–µ—á–∫–∞ üëá', reply_markup=queue_menu)
                else:
                    await message.answer('–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã? üëá', reply_markup=staff_menu)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


class UpdateStaff(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ –ë–î(users)"""
    user_id = State()
    position = State()


async def update_staff(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    staff = await db.get_active()
    if staff:
        staff_menu = InlineKeyboardMarkup(row_width=1) \
            .add(*(InlineKeyboardButton(text=f'{i[3]} {i[2]}', callback_data=f'upd={i[0]}') for i in staff))
        await message.reply('–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üëá', reply_markup=staff_menu)
    else:
        await message.reply('–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –¥–æ–º–∞ üò¨', reply_markup=admin_menu)


async def update_staff_end(message: types.Message, state=FSMContext):
    text = message.text
    if text in positions:
        async with state.proxy() as data:
            data['position'] = text
        await UpdateStaff.next()
        await db.update('users', {'position': data['position']}, {'user_id': data['user_id']})
        await message.answer(f'–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏–ª–∏ –Ω–∞ {text} üòÅ', reply_markup=admin_menu)
        await state.finish()
    else:
        await UpdateStaff.position.set()
        positions_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1) \
            .add(*(KeyboardButton(text) for text in positions))
        await message.reply('–í—ã–±–µ—Ä–∏ üëá', reply_markup=positions_menu)


async def delete_staff(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä–¥–Ω–∏–∫–∞"""
    staff = await db.get_active()
    if staff:
        staff_menu = InlineKeyboardMarkup(row_width=1) \
            .add(*(InlineKeyboardButton(text=f'{i[3]} {i[2]}', callback_data=f'del={i[0]}') for i in staff))
        await message.reply('–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üëá', reply_markup=staff_menu)
    else:
        await message.reply('–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –¥–æ–º–∞ üò¨', reply_markup=admin_menu)


async def open_shift(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    user_id = message.from_user.id
    if user_id in set(x[0] for x in await db.get_active()):
        line = await db.last_line()
        name = await db.get_user_name(user_id)

        await db.insert('working_mode', [{
            'user_id': user_id,
            'staff': name,
        }])

        if line:
            await db.insert('delivery', [{
                'user_id': user_id,
                'line': line + 1,
                'staff': name,
                'status': 1
            }])
        else:
            await db.insert('delivery', [{
                'user_id': user_id,
                'line': 1,
                'staff': name,
                'status': 1
            }])

        await db.insert('working_mode', [{
            'user_id': user_id,
            'staff': name,
            'status': 1
        }])

        await message.reply(f'<b>–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞</b>\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.\n–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.',
                            reply_markup=queue_menu)

        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É', reply_markup=remove)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


async def queue_num(message: types.Message):
    """–ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    user_id = message.from_user.id
    if user_id in set(x[0] for x in await db.get_active()):
        queue = await db.queue_num()
        if queue:
            for i, u_id in enumerate(queue):
                if u_id[0] == user_id:
                    await message.answer(f'–í–∞—à –Ω–æ–º–µ—Ä: {i + 1}', reply_markup=queue_menu)
                    break
        else:
            await message.answer(f'‚ö† –í–∞—Å –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏!!!', reply_markup=staff_menu)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


async def queue(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    user_id = message.from_id
    if user_id in tg.ADMINS or user_id in set(x[0] for x in await db.get_active()):
        queue = await db.queue()
        if queue:
            queue_staff_menu = InlineKeyboardMarkup(row_width=1) \
                .add(*(InlineKeyboardButton(text=f'{text[1]}', callback_data=f'get_queue={text[0]}') for text in queue))
            await message.answer(f'‚úÖ –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:', reply_markup=queue_staff_menu)
        else:
            if user_id in tg.ADMINS:
                await message.answer(f'‚ö† –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!!!', reply_markup=admin_menu)
            else:
                await message.answer(f'‚ö† –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!!!', reply_markup=logist_menu)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


async def drive_off(message: types.Message):
    """–û—Ç—ä–µ—Ö–∞—Ç—å"""
    if message.from_id in set(x[0] for x in await db.get_active()):
        drive_out_menu =  InlineKeyboardMarkup(row_width=1) \
            .add(*(InlineKeyboardButton(text=f'{i}', callback_data={i}) for i in drive_out))
        await message.answer('–ö—É–¥–∞ –æ—Ç—ä–µ–∑–∂–∞–µ—Ç–µ?', reply_markup=drive_out_menu)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


@dp.callback_query_handler()
async def callback_handler(call: types.CallbackQuery, state=FSMContext):
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery"""
    try:
        await dp.throttle('vote', rate=1)
    except Throttled:
        return await call.answer('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤...')

    if call.data in ['–ú–æ–π–∫–∞', '–®–∏–Ω–∫–∞', '–û–±–µ–¥', '–ú–∞–≥–∞–∑–∏–Ω', '–ü—Ä–æ—á–µ–µ']:
        user_id = call.from_user.id
        name = await db.get_user_name(user_id)
        await db.update('delivery', {'status': 5}, {'user_id': user_id})
        await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 5}])
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–û—Ç—ä–µ—Ö–∞–ª <i>({call.data})</i>')
        await call.message.edit_text(f'‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        await bot.send_message(user_id, '–ö–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç–µ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá', reply_markup=back_menu_inline)

    elif 'get_queue=' in call.data:
        user_id = call.data.split('=')[1]
        name = await db.get_user_name(user_id)
        status = await db.fetchone('delivery', 'status', {'user_id': user_id})
        if status['status'] not in [2, 3]:
            route_type = InlineKeyboardMarkup(row_width=2) \
                .add(
                InlineKeyboardButton(text='–≠–ö–°', callback_data=f'set_queue={user_id}=2'),
                InlineKeyboardButton(text='–ú–û–õ', callback_data=f'set_queue={user_id}=3'),
                InlineKeyboardButton(text='–ü–æ–ª–Ω—ã–π', callback_data=f'set_queue={user_id}=4'))
            await call.message.edit_text(f'{name}\n–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=route_type)
        else:
            await call.message.edit_text(f'–ö—É—Ä—å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n{name}\n–£–∂–µ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ')

    elif 'set_queue=' in call.data:
        _, user_id, status = call.data.split('=')
        user = await db.get_user(user_id)
        name = f'{user[3]} {user[2]}'
        username = user[1]
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())

        if int(user_id) in set(x[0] for x in await db.get_active()):
            if status == "2":
                await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 2}])
                await db.update('delivery', {'status': status, 'staff': f'–≠–ö–°–ü - {name}'}, {'user_id': user_id})
                msg = f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≠–ö–°–ü –¥–æ—Å—Ç–∞–≤–∫—É.\n–ö–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç–µ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá'
                await bot.send_message(user_id, msg, reply_markup=exp_menu)

                await bot.send_message(tg.GROUP_ID[0],
                                       f'@{user[1]}\n<b>{name} (–≠–ö–°–ü)</b>\n{date_time}\n–ù–∞ —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–µ',
                                       reply_markup=remove)
                await bot.send_message(tg.GROUP_ID[1],
                                       f'@{user[1]}\n<b>{name} (–≠–ö–°–ü)</b>\n{date_time}\n–ù–∞ —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–µ',
                                       reply_markup=remove)
            elif status == "3":
                await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 3}])
                await db.update('delivery', {'status': status, 'staff': f'–ú–û–õ - {name}'}, {'user_id': user_id})
                msg = f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ú–û–õ –¥–æ—Å—Ç–∞–≤–∫—É.\n–ö–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç–µ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá'
                await bot.send_message(user_id, msg, reply_markup=exp_menu)

                await bot.send_message(tg.GROUP_ID[0], f'@{user[1]}\n<b>{name} (–ú–û–õ)</b>\n{date_time}\n–ù–∞ –º–æ–ª–Ω–∏–∏',
                                       reply_markup=remove)
                await bot.send_message(tg.GROUP_ID[1], f'@{user[1]}\n<b>{name} (–ú–û–õ)</b>\n{date_time}\n–ù–∞ –º–æ–ª–Ω–∏–∏',
                                       reply_markup=remove)
            else:
                await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 4}])
                await db.update('delivery', {'status': status}, {'user_id': user_id})
                msg = '–í—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç.\n–ö–æ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç–µ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá'
                await bot.send_message(user_id, msg, reply_markup=long_menu)

                await bot.send_message(tg.GROUP_ID[0], f'@{user[1]}\n<b>{name}</b>\n{date_time}\n–ù–∞ –ø–æ–ª–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ',
                                       reply_markup=remove)
                await bot.send_message(tg.GROUP_ID[1], f'@{user[1]}\n<b>{name}</b>\n{date_time}\n–ù–∞ –ø–æ–ª–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ',
                                       reply_markup=remove)
            await call.message.edit_text("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    elif call.data == "1":
        user_id = call.from_user.id
        name = await db.get_user_name(user_id)
        await db.update('delivery', {'status': 1}, {'user_id': user_id})
        await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 1}])
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–ù–∞ –±–∞–∑–µ', reply_markup=remove)
        await call.message.edit_text("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.send_message(call.from_user.id, f'‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.', reply_markup=queue_menu)

    elif call.data == "6":
        user_id = call.from_user.id
        await CloseShift.yes.set()
        await bot.send_message(call.from_user.id, '–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É? üëá', reply_markup=yes_no)

    elif 'upd=' in call.data:
        user_id = call.data.split('=')[1]
        async with state.proxy() as data:
            data['user_id'] = user_id
        await UpdateStaff.next()
        await UpdateStaff.position.set()

        positions_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1) \
            .add(*(KeyboardButton(text) for text in positions))

        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å üëá', reply_markup=positions_menu)

    elif 'del=' in call.data:
        user_id = call.data.split('=')[1]
        await db.delete('users', 'user_id', str(user_id))
        await call.message.edit_text(f'–£–¥–∞–ª–∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üòà')
        await bot.send_message(call.from_user.id, f'–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã? üëá', reply_markup=admin_menu)

    elif 'report=' in call.data:
        user_id = call.data.split('=')[1]
        response = await db.report(user_id)
        await call.message.edit_text('\n'.join([f'{i[0][0:-3]} | {i[1]} - {i[2]}' for i in response if i is not None]))

    elif 'close=' in call.data:
        user_id = call.data.split('=')[1]
        name = await db.get_user_name(user_id)
        close_name = await db.get_user_name(call.from_user.id)
        await db.delete('delivery', 'user_id', str(user_id))
        await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 6}])
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        if close_name:
            await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n{close_name} - –∑–∞–∫—Ä—ã–ª —Å–º–µ–Ω—É')
        else:
            await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–ê–¥–º–∏–Ω - –∑–∞–∫—Ä—ã–ª —Å–º–µ–Ω—É')
        if user_id in set(x[0] for x in await db.get_active()):
            await bot.send_message(user_id, '‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞', reply_markup=start_menu)
        await call.message.edit_text(f'‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞')


async def back(message: types.Message):
    """–ù–∞ –±–∞–∑–µ"""
    user_id = message.from_user.id
    if user_id in set(x[0] for x in await db.get_active()):
        line = await db.last_line()
        name = await db.get_user_name(user_id)
        if line:
            await db.update('delivery', {'line': line + 1, 'status': 1}, {'user_id': user_id})
        else:
            await db.update('delivery', {'line': 1, 'status': 1}, {'user_id': user_id})
        await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 1}])
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–ù–∞ –±–∞–∑–µ', reply_markup=remove)
        await message.answer(f'‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.', reply_markup=queue_menu)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


async def exp(message: types.Message):
    """–ü–æ—Å–ª–µ –≠–ö–°/–ú–û–õ"""
    user_id = message.from_user.id
    if user_id in set(x[0] for x in await db.get_active()):
        name = await db.get_user_name(user_id)
        await db.update('delivery', {'status': 1, 'staff': name}, {'user_id': user_id})
        await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 1}])
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–í–µ—Ä–Ω—É–ª—Å—è —Å –≠–ö–°/–ú–û–õ', reply_markup=remove)
        await message.answer(f'‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.', reply_markup=queue_menu)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


class CloseShift(StatesGroup):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤ –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"""
    yes = State()


async def close_shift_start(message: types.Message):
    """–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"""
    await CloseShift.yes.set()
    await message.reply('–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É? üëá', reply_markup=yes_no)


async def close_shift_end(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['yes'] = message.text.strip()
    await CloseShift.next()

    user_id = message.from_user.id
    if data['yes'] == '–î–∞':
        name = await db.get_user_name(user_id)
        await db.delete('delivery', 'user_id', str(user_id))
        await db.insert('working_mode', [{'user_id': user_id, 'staff': name, 'status': 6}])
        date_time = pytils.dt.ru_strftime(u"%d %B %y, %a", inflected=True, date=get_current_datetime())
        await bot.send_message(tg.GROUP_ID[0], f'<b>{name}</b>\n{date_time}\n–ó–∞–∫—Ä—ã–ª —Å–º–µ–Ω—É', reply_markup=remove)
        await message.answer('‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞', reply_markup=start_menu)
        await state.finish()
    else:
        await message.answer('–û—à–∏–±–ª–∏—Å—å, –Ω—É —Å –∫–µ–º –Ω–µ –±—ã–≤–∞–µ—Ç üòÅ', reply_markup=staff_menu)
        await state.finish()


async def close_open_shift(message: types.Message):
    staff = await db.open_shift()
    if staff:
        staff_menu = InlineKeyboardMarkup(row_width=1) \
            .add(*(InlineKeyboardButton(text=f'{text[1]}', callback_data=f'close={text[0]}') for text in staff))
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üëá', reply_markup=staff_menu)
    else:
        await message.answer('–í—Å–µ —Å–º–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç—ã üòÉ')


async def report_staff(message: types.Message):
    """–û—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã"""
    staff = await db.get_active_courier()
    staff_menu = InlineKeyboardMarkup(row_width=1) \
        .add(*(InlineKeyboardButton(text=f'{text[1]}', callback_data=f'report={text[0]}') for text in staff))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üëá', reply_markup=staff_menu)


async def report_all(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    data = await db.report_csv()
    dir_name = 'src'
    if not os.path.exists(os.path.join(os.getcwd(), dir_name)):
        os.mkdir(dir_name)

    file = await write_report_csv(directory=os.path.join(os.getcwd(), dir_name),
                                  name='courier.csv',
                                  headers=['add_date_time', 'staff', 'status'],
                                  data=data)
    await bot.send_document(message.from_user.id, open(file, 'rb'))
    os.remove(file)


async def empty(message: types.Message):
    """–ù–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message.chat.type == 'private':
        return

    user_id = message.from_user.id
    if user_id in tg.ADMINS or user_id in set(x[0] for x in await db.get_active()):
        await message.answer('–ß—Ç–æ –∑–∞ –µ—Ä–µ—Å—å??? ü§£\n–£—á–∏ –º–∞—Ç—á–∞—Å—Ç—å >>> /help', disable_web_page_preview=True)
    else:
        await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=remove)


def register_handlers_delivery(d: Dispatcher):
    d.register_message_handler(cancel, commands='cancel', state='*')
    d.register_message_handler(cancel, Text(equals=['–æ—Ç–º–µ–Ω–∞', '‚ùå –æ—Ç–º–µ–Ω–∞', '‚¨Ü –í—ã–π—Ç–∏'], ignore_case=True), state='*')
    d.register_message_handler(update_staff, Text(equals=['–æ–±–Ω–æ–≤–∏—Ç—å'], ignore_case=True), state=None)
    d.register_message_handler(update_staff_end, state=UpdateStaff.position)
    d.register_message_handler(delete_staff, Text(equals=['—É–¥–∞–ª–∏—Ç—å'], ignore_case=True), state=None)
    d.register_message_handler(open_shift, Text(equals=['‚úÖ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'], ignore_case=True), state=None)
    d.register_message_handler(queue_num, Text(equals=['‚è≥ –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏'], ignore_case=True), state=None)
    d.register_message_handler(drive_off, Text(equals=['üöó –û—Ç—ä–µ—Ö–∞—Ç—å'], ignore_case=True), state=None)
    d.register_message_handler(exp, Text(equals=['‚ö° –ü–æ—Å–ª–µ –≠–ö–°/–ú–û–õ'], ignore_case=True), state=None)
    d.register_message_handler(back, Text(equals=['üè† –ù–∞ –±–∞–∑–µ'], ignore_case=True), state=None)
    d.register_message_handler(close_shift_start, Text(equals=['‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É'], ignore_case=True), state=None)
    d.register_message_handler(close_shift_end, state=CloseShift.yes)
    d.register_message_handler(close_open_shift, Text(equals=['‚ùå –ó–∞–∫—Ä—ã—Ç—å'], ignore_case=True), state=None)
    d.register_message_handler(queue, Text(equals=['–û—á–µ—Ä–µ–¥—å'], ignore_case=True), state=None)
    d.register_message_handler(report_staff, Text(equals=['üìä –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É'], ignore_case=True), state=None)
    d.register_message_handler(report_all, Text(equals=['üóÇ –û—Ç—á–µ—Ç .csv'], ignore_case=True), state=None)
    dp.register_message_handler(empty)
